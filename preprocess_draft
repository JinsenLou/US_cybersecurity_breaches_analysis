#!/bin/bash

#Author: Jinsen Lou, Student number: 23737198
# Check the number of argument
if [[ $# -ne 1 ]]
then
  echo "The argument must be only one, please provide the file name."
  >/dev/stderr
  exit 1
fi

# Check that the file exits and is not 0 length. If not export it to the standard error and exit
if [[ ! -s $1 ]]
then
  echo "Error: $file does not exist or it is empty."
  > /dev/stderr
  exit 1
fi

### This part is to check every coloumn if it has invalid value, if it is then drop the whole column 
### and keep those rows with valid values 


# First, this is to check the state column
# Define a regular expression to match valid US state abbreviations
state_regex='^(AL|AK|AS|AZ|AR|CA|CO|CT|DE|DC|FM|FL|GA|GU|HI|ID|IL|IN|IA|KS|KY|LA|ME|MH|MD|MA|MI|MN|MS|MO|MT|NE|NV|NH|NJ|NM|NY|NC|ND|MP|OH|OK|OR|PW|PA|PR|RI|SC|SD|TN|TX|UT|VT|VI|VA|WA|WV|WI|WY)$'



# Find the index of the "state" column
state_index=$(find_index "state")

# Use the state index to process the data
awk -F $'\t' -v OFS=$'\t' -v regex="$state_regex" '{ if (NR==1 || $state_index ~ regex) { print } }' "$1" > processed_data.tsv

# Find the index of the "Individual_affected"
I_A_index = $(find_index "Individuals_affected")



# Check structured fields for errors
# Replace "FIELD_NAME" with the name of the field you want to check
# Replace "REGEX_PATTERN" with the regular expression pattern for the field
# You can add more fields and patterns as needed
if grep -q -E 'FIELD_NAME[[:space:]]+REGEX_PATTERN' "$1"; then
  echo "Error: invalid value in FIELD_NAME field"
  exit 1
fi


# Define a regular expression to match the US date format (MM/DD/YYYY)
date_regex='^(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])\/([0-9]{4})$'

# Add month and year columns to the input data
awk -F, -v OFS=',' '{ if (NR==1) { print $0,"Month","Year" } else { match($4,/'"$date_regex"'/); month=substr($4,RSTART,RLENGTH-8); year=substr($4,RLENGTH-3); print $0,month,year } }' "$1" > processed_data.csv

# Print a message indicating the script has finished
echo "Data preprocessing complete. Processed data saved to processed_data.csv"

# Clean up Type of Breach column
awk -F, 'BEGIN{OFS=","}{gsub(/"/,""); sub(/(\/|,).*/,"",$NF); print}' processed_data.csv > cleaned_data.csv

echo "Output written to cleaned_data.csv"

#The Location of Breached Information and the Summary columns can be dropped.
cut -f 1-10,14- cleaned_data.csv > Cyber_Security_Breaches_clean.tsv

echo "Output written to Cyber_Security_Breaches_clean.tsv"

# Define a regular expression to match valid date formats (YYYY/MM/DD or MM/DD/YYYY)
date_regex='^(20[0-9][0-9]\/([0-9]?[0-9])\/([0-9]?[0-9])|[0-9]?[0-9]\/([0-9]?[0-9])\/20[0-9][0-9])$'


# Check for invalid date values and drop the corresponding rows
awk -F $'\t' -v OFS=$'\t' -v regex="$date_regex" '{ if (NR==1 || $4 ~ regex) { print } }' "$1" > processed_data.tsv



awk -v median="$median" -v MAD="$MAD" 'BEGIN {FS="\t"} 
    { 
      sum_median_mad = median + MAD
      diff_median_mad = median - MAD

      if ($2 >= sum_median_mad) {
        indicator = "++"
      } else if ($2 <= diff_median_mad) {
        indicator = "--"
      } else {
        indicator = ""
      }

      printf("%s\t%d\t%s\n", $1, $2, indicator)
    }' month_individuals > output_data
    # Create an array with the month names
month_names=("Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec")
for ((i=0; i<12; i++)) {
    Month[${month_names[$i]}]=$((i+1))
}
awk 'BEGIN {
        FS="\t"
        split("Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec", months)}
    { $1 = months[$1] }
    {print $0}' output_data
awk 'BEGIN{FS="\t"; split("Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec", months)}
     {print months[$1], $2, $3}' output_data


sum_median_mad=$((median + MAD))
diff_median_mad=$((median - MAD))

echo $sum_median_mad
echo $diff_median_mad

awk -v state_regex="$state_regex" -v individuals_regex="$individuals_regex" 'BEGIN { FS = OFS= "\t" }
{ if (NR==1 || (($2 ~ state_regex) # Only if the state code is real
&& ($3 ~ individuals_regex) # Only if the individuals column value is number of didits and greater than 0
&& ( $5 >= 1 && $5 <= 12 ) # The month shoud be between 1 to 12
&& ( $6 >= 1900 && $6 <= 2023 ))) # The year cannot be less than 1900 or greater than 2023
{ print} }' processed_data_type


# Counting the total number of incidents per month
awk 'BEGIN {FS="\t"} 
    {if ($6 != "" && $3 != "") 
    {total[$6] += NR}} 
    END {for (month=1; month<=12; month++) 
    {printf "%s\t%d\n", month, total[month]}}' "$1" > month_individuals

    # Transform the month number with the corresponding name
awk 'BEGIN {FS="\t"}
    {if ($1 == 1) {printf "%s\t%d\t%s\n", "Jan", $2, $3}
    else if ($1 == 2) {printf "%s\t%d\t%s\n", "Feb", $2, $3}
    else if ($1 == 3) {printf "%s\t%d\t%s\n", "Mar", $2, $3}
    else if ($1 == 4) {printf "%s\t%d\t%s\n", "Apr", $2, $3}
    else if ($1 == 5) {printf "%s\t%d\t%s\n", "May", $2, $3}
    else if ($1 == 6) {printf "%s\t%d\t%s\n", "Jun", $2, $3}
    else if ($1 == 7) {printf "%s\t%d\t%s\n", "Jul", $2, $3}
    else if ($1 == 8) {printf "%s\t%d\t%s\n", "Aug", $2, $3}
    else if ($1 == 9) {printf "%s\t%d\t%s\n", "Sep", $2, $3}
    else if ($1 == 10) {printf "%s\t%d\t%s\n", "Oct", $2, $3}
    else if ($1 == 11) {printf "%s\t%d\t%s\n", "Nov", $2, $3}
    else {printf "%s\t%d\t%s\n", "Dec", $2, $3}}
    ' output_data
